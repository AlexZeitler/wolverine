// <auto-generated/>
#pragma warning disable
using Lamar;
using Microsoft.AspNetCore.Routing;
using System;
using System.Linq;
using Wolverine.Http;

namespace Internal.Generated.WolverineHandlers
{
    // START: POST_ef_publish
    public class POST_ef_publish : Wolverine.Http.EndpointHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _options;
        private readonly Lamar.IContainer _rootContainer;

        public POST_ef_publish(Wolverine.Http.WolverineHttpOptions options, Lamar.IContainer rootContainer) : base(options)
        {
            _options = options;
            _rootContainer = rootContainer;
        }



        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {
            await using var nestedContainer = (Lamar.IContainer)_rootContainer.GetNestedContainer();
            var efCoreEndpoints = nestedContainer.GetInstance<WolverineWebApi.EfCoreEndpoints>();
            var messageBus = nestedContainer.GetInstance<Wolverine.IMessageBus>();
            var (command, jsonContinue) = await ReadJsonAsync<WolverineWebApi.CreateItemCommand>(httpContext);
            if (jsonContinue == Wolverine.HandlerContinuation.Stop) return;
            var itemsDbContext = nestedContainer.GetInstance<WolverineWebApi.ItemsDbContext>();
            var messageContext = nestedContainer.GetInstance<Wolverine.Runtime.MessageContext>();
            // Enroll the DbContext & IMessagingContext in the outgoing Wolverine outbox transaction
            var envelopeTransaction = Wolverine.EntityFrameworkCore.WolverineEntityCoreExtensions.BuildTransaction(itemsDbContext, messageContext);
            await messageContext.EnlistInOutboxAsync(envelopeTransaction);
            await efCoreEndpoints.PublishItem(command, itemsDbContext, messageBus).ConfigureAwait(false);
            // Added by EF Core Transaction Middleware
            var result_of_SaveChangesAsync = await itemsDbContext.SaveChangesAsync(httpContext.RequestAborted).ConfigureAwait(false);

            // If we have separate context for outbox and application, the we need to manually commit the transaction
            if (envelopeTransaction is Wolverine.EntityFrameworkCore.Internals.RawDatabaseEnvelopeTransaction rawTx) { await rawTx.CommitAsync(); }
            await messageContext.FlushOutgoingMessagesAsync().ConfigureAwait(false);
        }

    }

    // END: POST_ef_publish
    
    
}


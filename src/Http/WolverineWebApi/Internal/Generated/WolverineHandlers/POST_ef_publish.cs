// <auto-generated/>
#pragma warning disable
using Microsoft.AspNetCore.Routing;
using Microsoft.EntityFrameworkCore;
using System;
using System.Linq;
using Wolverine.Http;
using Wolverine.Runtime;

namespace Internal.Generated.WolverineHandlers
{
    // START: POST_ef_publish
    public class POST_ef_publish : Wolverine.Http.HttpHandler
    {
        private readonly Wolverine.Http.WolverineHttpOptions _options;
        private readonly Wolverine.Runtime.IWolverineRuntime _wolverineRuntime;
        private readonly Microsoft.EntityFrameworkCore.DbContextOptions<WolverineWebApi.ItemsDbContext> _dbContextOptions;

        public POST_ef_publish(Wolverine.Http.WolverineHttpOptions options, Wolverine.Runtime.IWolverineRuntime wolverineRuntime, Microsoft.EntityFrameworkCore.DbContextOptions<WolverineWebApi.ItemsDbContext> dbContextOptions) : base(options)
        {
            _options = options;
            _wolverineRuntime = wolverineRuntime;
            _dbContextOptions = dbContextOptions;
        }



        public override async System.Threading.Tasks.Task Handle(Microsoft.AspNetCore.Http.HttpContext httpContext)
        {
            var efCoreEndpoints = new WolverineWebApi.EfCoreEndpoints();
            await using var itemsDbContext = new WolverineWebApi.ItemsDbContext(_dbContextOptions);
            var messageContext = new Wolverine.Runtime.MessageContext(_wolverineRuntime);
            
            // Enroll the DbContext & IMessagingContext in the outgoing Wolverine outbox transaction
            var envelopeTransaction = Wolverine.EntityFrameworkCore.WolverineEntityCoreExtensions.BuildTransaction(itemsDbContext, messageContext);
            await messageContext.EnlistInOutboxAsync(envelopeTransaction);
            var (command, jsonContinue) = await ReadJsonAsync<WolverineWebApi.CreateItemCommand>(httpContext);
            if (jsonContinue == Wolverine.HandlerContinuation.Stop) return;
            await efCoreEndpoints.PublishItem(command, itemsDbContext, ((Wolverine.IMessageBus)messageContext)).ConfigureAwait(false);
            
            // Added by EF Core Transaction Middleware
            var result_of_SaveChangesAsync = await itemsDbContext.SaveChangesAsync(httpContext.RequestAborted).ConfigureAwait(false);

            // If we have separate context for outbox and application, the we need to manually commit the transaction
            if (envelopeTransaction is Wolverine.EntityFrameworkCore.Internals.RawDatabaseEnvelopeTransaction rawTx) { await rawTx.CommitAsync(); }
            await messageContext.FlushOutgoingMessagesAsync().ConfigureAwait(false);
        }

    }

    // END: POST_ef_publish
    
    
}


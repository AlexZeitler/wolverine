// <auto-generated/>
#pragma warning disable
using Wolverine.Marten.Publishing;

namespace Internal.Generated.WolverineHandlers
{
    // START: StartReservationHandler1747369353
    public class StartReservationHandler1747369353 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Wolverine.Marten.Publishing.OutboxedSessionFactory _outboxedSessionFactory;

        public StartReservationHandler1747369353(Wolverine.Marten.Publishing.OutboxedSessionFactory outboxedSessionFactory)
        {
            _outboxedSessionFactory = outboxedSessionFactory;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            await using var documentSession = _outboxedSessionFactory.OpenSession(context);
            var startReservation = (WolverineWebApi.StartReservation)context.Envelope.Message;
            (var outgoing1, var outgoing2, var outgoing3) = WolverineWebApi.StartReservationHandler.Handle(startReservation);
            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing1).ConfigureAwait(false);

            
            // Register the document operation with the current session
            documentSession.Insert(outgoing2);
            
            // Outgoing, cascaded message
            await context.EnqueueCascadingAsync(outgoing3).ConfigureAwait(false);


            // Commit the unit of work
            await documentSession.SaveChangesAsync(cancellation).ConfigureAwait(false);
        }

    }

    // END: StartReservationHandler1747369353
    
    
}


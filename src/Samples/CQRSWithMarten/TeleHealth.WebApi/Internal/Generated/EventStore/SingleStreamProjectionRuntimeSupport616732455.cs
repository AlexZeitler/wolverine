// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SingleStreamProjectionLiveAggregation616732455
    public class SingleStreamProjectionLiveAggregation616732455 : Marten.Events.Aggregation.AsyncLiveAggregatorBase<TeleHealth.Common.ProviderShift>
    {
        private readonly Marten.Events.Aggregation.SingleStreamProjection<TeleHealth.Common.ProviderShift> _singleStreamProjection;

        public SingleStreamProjectionLiveAggregation616732455(Marten.Events.Aggregation.SingleStreamProjection<TeleHealth.Common.ProviderShift> singleStreamProjection)
        {
            _singleStreamProjection = singleStreamProjection;
        }



        public override async System.Threading.Tasks.ValueTask<TeleHealth.Common.ProviderShift> BuildAsync(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, TeleHealth.Common.ProviderShift snapshot, System.Threading.CancellationToken cancellation)
        {
            if (!events.Any()) return null;
            TeleHealth.Common.ProviderShift providerShift = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= await Create(events[0], session, cancellation);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public async System.Threading.Tasks.ValueTask<TeleHealth.Common.ProviderShift> Create(Marten.Events.IEvent @event, Marten.IQuerySession session, System.Threading.CancellationToken cancellation)
        {
            var providerShift = new TeleHealth.Common.ProviderShift();
            switch (@event)
            {
                case Marten.Events.IEvent<TeleHealth.Common.ProviderJoined> event_ProviderJoined15:
                    providerShift = await TeleHealth.Common.ProviderShift.Create(event_ProviderJoined15.Data, session).ConfigureAwait(false);
                    break;
            }

            return null;
        }


        public TeleHealth.Common.ProviderShift CreateDefault(Marten.Events.IEvent @event)
        {
            return new TeleHealth.Common.ProviderShift();
        }


        public TeleHealth.Common.ProviderShift Apply(Marten.Events.IEvent @event, TeleHealth.Common.ProviderShift aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<TeleHealth.Common.ProviderReady> event_ProviderReady16:
                    aggregate.Apply(event_ProviderReady16.Data);
                    break;
                case Marten.Events.IEvent<TeleHealth.Common.ProviderAssigned> event_ProviderAssigned17:
                    aggregate.Apply(event_ProviderAssigned17.Data);
                    break;
                case Marten.Events.IEvent<TeleHealth.Common.ProviderPaused> event_ProviderPaused18:
                    aggregate.Apply(event_ProviderPaused18.Data);
                    break;
                case Marten.Events.IEvent<TeleHealth.Common.ChartingStarted> event_ChartingStarted19:
                    aggregate.Apply(event_ChartingStarted19.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: SingleStreamProjectionLiveAggregation616732455
    
    
    // START: SingleStreamProjectionInlineHandler616732455
    public class SingleStreamProjectionInlineHandler616732455 : Marten.Events.Aggregation.AggregationRuntime<TeleHealth.Common.ProviderShift, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<TeleHealth.Common.ProviderShift, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<TeleHealth.Common.ProviderShift, System.Guid> _storage;
        private readonly Marten.Events.Aggregation.SingleStreamProjection<TeleHealth.Common.ProviderShift> _singleStreamProjection;

        public SingleStreamProjectionInlineHandler616732455(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<TeleHealth.Common.ProviderShift, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<TeleHealth.Common.ProviderShift, System.Guid> storage, Marten.Events.Aggregation.SingleStreamProjection<TeleHealth.Common.ProviderShift> singleStreamProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _singleStreamProjection = singleStreamProjection;
        }



        public override async System.Threading.Tasks.ValueTask<TeleHealth.Common.ProviderShift> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<TeleHealth.Common.ProviderShift, System.Guid> slice, Marten.Events.IEvent evt, TeleHealth.Common.ProviderShift aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<TeleHealth.Common.ProviderJoined> event_ProviderJoined25:
                    aggregate = await TeleHealth.Common.ProviderShift.Create(event_ProviderJoined25.Data, session).ConfigureAwait(false);
                    return aggregate;
                case Marten.Events.IEvent<TeleHealth.Common.ProviderPaused> event_ProviderPaused23:
                    aggregate ??= new TeleHealth.Common.ProviderShift();
                    aggregate.Apply(event_ProviderPaused23.Data);
                    return aggregate;
                case Marten.Events.IEvent<TeleHealth.Common.ProviderAssigned> event_ProviderAssigned22:
                    aggregate ??= new TeleHealth.Common.ProviderShift();
                    aggregate.Apply(event_ProviderAssigned22.Data);
                    return aggregate;
                case Marten.Events.IEvent<TeleHealth.Common.ProviderReady> event_ProviderReady21:
                    aggregate ??= new TeleHealth.Common.ProviderShift();
                    aggregate.Apply(event_ProviderReady21.Data);
                    return aggregate;
                case Marten.Events.IEvent<TeleHealth.Common.ChartingStarted> event_ChartingStarted24:
                    aggregate ??= new TeleHealth.Common.ProviderShift();
                    aggregate.Apply(event_ChartingStarted24.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public async System.Threading.Tasks.ValueTask<TeleHealth.Common.ProviderShift> Create(Marten.Events.IEvent @event, Marten.IQuerySession session, System.Threading.CancellationToken cancellation)
        {
            var providerShift = new TeleHealth.Common.ProviderShift();
            switch (@event)
            {
                case Marten.Events.IEvent<TeleHealth.Common.ProviderJoined> event_ProviderJoined20:
                    providerShift = await TeleHealth.Common.ProviderShift.Create(event_ProviderJoined20.Data, session).ConfigureAwait(false);
                    break;
            }

            return null;
        }


        public TeleHealth.Common.ProviderShift CreateDefault(Marten.Events.IEvent @event)
        {
            return new TeleHealth.Common.ProviderShift();
        }

    }

    // END: SingleStreamProjectionInlineHandler616732455
    
    
}


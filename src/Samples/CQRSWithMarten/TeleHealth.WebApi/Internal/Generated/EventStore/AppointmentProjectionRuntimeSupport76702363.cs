// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;
using TeleHealth.Common;

namespace Marten.Generated.EventStore
{
    // START: AppointmentProjectionLiveAggregation76702363
    public class AppointmentProjectionLiveAggregation76702363 : Marten.Events.Aggregation.AsyncLiveAggregatorBase<TeleHealth.Common.Appointment>
    {
        private readonly TeleHealth.Common.AppointmentProjection _appointmentProjection;

        public AppointmentProjectionLiveAggregation76702363(TeleHealth.Common.AppointmentProjection appointmentProjection)
        {
            _appointmentProjection = appointmentProjection;
        }



        public override async System.Threading.Tasks.ValueTask<TeleHealth.Common.Appointment> BuildAsync(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, TeleHealth.Common.Appointment snapshot, System.Threading.CancellationToken cancellation)
        {
            if (!events.Any()) return null;
            TeleHealth.Common.Appointment appointment = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= await Create(events[0], session, cancellation);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = await Apply(@event, snapshot, session, cancellation);
            }

            return snapshot;
        }


        public async System.Threading.Tasks.ValueTask<TeleHealth.Common.Appointment> Create(Marten.Events.IEvent @event, Marten.IQuerySession session, System.Threading.CancellationToken cancellation)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentRequested> event_AppointmentRequested3:
                    return await _appointmentProjection.Create(event_AppointmentRequested3.Data, session).ConfigureAwait(false);
                    break;
            }

            return null;
        }


        public TeleHealth.Common.Appointment CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for TeleHealth.Common.Appointment or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }


        public async System.Threading.Tasks.ValueTask<TeleHealth.Common.Appointment> Apply(Marten.Events.IEvent @event, TeleHealth.Common.Appointment aggregate, Marten.IQuerySession session, System.Threading.CancellationToken cancellation)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentRouted> event_AppointmentRouted4:
                    _appointmentProjection.Apply(event_AppointmentRouted4.Data, aggregate);
                    break;
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentScheduled> event_AppointmentScheduled5:
                    await _appointmentProjection.Apply(event_AppointmentScheduled5.Data, aggregate, session).ConfigureAwait(false);
                    break;
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentStarted> event_AppointmentStarted6:
                    _appointmentProjection.Apply(event_AppointmentStarted6.Data, aggregate);
                    break;
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentFinished> event_AppointmentFinished7:
                    _appointmentProjection.Apply(event_AppointmentFinished7.Data, aggregate);
                    break;
            }

            return aggregate;
        }

    }

    // END: AppointmentProjectionLiveAggregation76702363
    
    
    // START: AppointmentProjectionInlineHandler76702363
    public class AppointmentProjectionInlineHandler76702363 : Marten.Events.Aggregation.AggregationRuntime<TeleHealth.Common.Appointment, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<TeleHealth.Common.Appointment, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<TeleHealth.Common.Appointment, System.Guid> _storage;
        private readonly TeleHealth.Common.AppointmentProjection _appointmentProjection;

        public AppointmentProjectionInlineHandler76702363(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<TeleHealth.Common.Appointment, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<TeleHealth.Common.Appointment, System.Guid> storage, TeleHealth.Common.AppointmentProjection appointmentProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _appointmentProjection = appointmentProjection;
        }



        public override async System.Threading.Tasks.ValueTask<TeleHealth.Common.Appointment> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<TeleHealth.Common.Appointment, System.Guid> slice, Marten.Events.IEvent evt, TeleHealth.Common.Appointment aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentFinished> event_AppointmentFinished13:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for TeleHealth.Common.Appointment should either have the Create Method or Constructor for event of type Marten.Events.IEvent<TeleHealth.Common.AppointmentFinished>, or TeleHealth.Common.Appointment should have a Default Constructor.");
                    _appointmentProjection.Apply(event_AppointmentFinished13.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentRouted> event_AppointmentRouted10:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for TeleHealth.Common.Appointment should either have the Create Method or Constructor for event of type Marten.Events.IEvent<TeleHealth.Common.AppointmentRouted>, or TeleHealth.Common.Appointment should have a Default Constructor.");
                    _appointmentProjection.Apply(event_AppointmentRouted10.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentScheduled> event_AppointmentScheduled11:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for TeleHealth.Common.Appointment should either have the Create Method or Constructor for event of type Marten.Events.IEvent<TeleHealth.Common.AppointmentScheduled>, or TeleHealth.Common.Appointment should have a Default Constructor.");
                    await _appointmentProjection.Apply(event_AppointmentScheduled11.Data, aggregate, session).ConfigureAwait(false);
                    return aggregate;
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentStarted> event_AppointmentStarted12:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for TeleHealth.Common.Appointment should either have the Create Method or Constructor for event of type Marten.Events.IEvent<TeleHealth.Common.AppointmentStarted>, or TeleHealth.Common.Appointment should have a Default Constructor.");
                    _appointmentProjection.Apply(event_AppointmentStarted12.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<TeleHealth.Common.ChartingFinished> event_ChartingFinished9:
                    return null;
                    return aggregate;
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentRequested> event_AppointmentRequested14:
                    aggregate = await _appointmentProjection.Create(event_AppointmentRequested14.Data, session).ConfigureAwait(false);
                    return aggregate;
            }

            return aggregate;
        }


        public async System.Threading.Tasks.ValueTask<TeleHealth.Common.Appointment> Create(Marten.Events.IEvent @event, Marten.IQuerySession session, System.Threading.CancellationToken cancellation)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<TeleHealth.Common.AppointmentRequested> event_AppointmentRequested8:
                    return await _appointmentProjection.Create(event_AppointmentRequested8.Data, session).ConfigureAwait(false);
                    break;
            }

            return null;
        }


        public TeleHealth.Common.Appointment CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for TeleHealth.Common.Appointment or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }

    }

    // END: AppointmentProjectionInlineHandler76702363
    
    
}


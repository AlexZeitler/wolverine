// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.Logging;
using OrderSagaSample;
using Wolverine.Marten.Publishing;
using Wolverine.Persistence.Sagas;
using Wolverine.Runtime;
using Wolverine.Runtime.Handlers;

namespace Internal.Generated.WolverineHandlers
{
    #region sample_generated_code_for_CompleteOrder

    public class CompleteOrderHandler1228388417 : MessageHandler
    {
        private readonly OutboxedSessionFactory _outboxedSessionFactory;
        private readonly ILogger<Order> _logger;

        public CompleteOrderHandler1228388417(OutboxedSessionFactory outboxedSessionFactory, ILogger<Order> logger)
        {
            _outboxedSessionFactory = outboxedSessionFactory;
            _logger = logger;
        }
        
        public override async Task HandleAsync(MessageContext context, CancellationToken cancellation)
        {
            await using var documentSession = _outboxedSessionFactory.OpenSession(context);
            var completeOrder = (CompleteOrder)context.Envelope.Message;
            string sagaId = context.Envelope.SagaId ?? completeOrder.Id;
            if (string.IsNullOrEmpty(sagaId)) throw new IndeterminateSagaStateIdException(context.Envelope);
            
            // Try to load the existing saga document
            var order = await documentSession.LoadAsync<Order>(sagaId, cancellation).ConfigureAwait(false);
            if (order == null)
            {
                throw new UnknownSagaException(typeof(Order), sagaId);
            }

            else
            {
                order.Handle(completeOrder, _logger);
                if (order.IsCompleted())
                {
                    // Register the document operation with the current session
                    documentSession.Delete(order);
                }
                else
                {
                    
                    // Register the document operation with the current session
                    documentSession.Update(order);
                }
                
                // Commit all pending changes
                await documentSession.SaveChangesAsync(cancellation).ConfigureAwait(false);
            }

        }
    }

    #endregion

    
    
}

